{"version":3,"file":"static/js/736.4dd3b728.chunk.js","mappings":"8QAEaA,EAAOC,EAAAA,GAAAA,GAAH,8CAIJC,EAAOD,EAAAA,GAAAA,GAAH,kFAMJE,EAASF,EAAAA,GAAAA,IAAH,0M,SC0CnB,EAhDa,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACJF,GACFG,GAGH,GAAE,CAACH,IAEJ,IAAMG,EAAO,yCAAG,yGAEZJ,GAAa,GAFD,UAGWK,EAAAA,EAAAA,IAAuBJ,GAHlC,OAGNK,EAHM,OAKZV,EAAQU,GALI,gDAOZR,EAAS,SAPG,yBASZE,GAAa,GATD,4EAAH,qDAab,OACE,gCACGH,IAAS,iCACTE,IAAa,SAACQ,EAAA,EAAD,KACd,SAACjB,EAAD,UACGK,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,UAAlC,OACR,UAACpB,EAAD,YACE,SAACC,EAAD,WACE,gBAAKoB,IAAKF,EAAY,yCAAqCA,GAAiB,GAAIG,IAAKJ,EAAMK,MAAM,WAGnG,iCACE,wBAAKL,KACL,uBAAIE,SAPGH,EADH,QAejB,C,qMCjDDO,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAiB,yCAAG,0GACRF,EAAAA,EAAAA,GAAM,sBAAuB,CAClDG,OAAQ,CACNC,QAASH,KAHkB,cACzBX,EADyB,yBAMxBA,EAASe,KAAKC,SANU,2CAAH,qDASjBC,EAAY,yCAAG,WAAOC,GAAP,6FACHR,EAAAA,EAAAA,GAAM,gBAAiB,CAC5CG,OAAQ,CACNC,QAASH,EACTO,MAAOA,KAJe,cACpBlB,EADoB,yBAOnBA,EAASe,KAAKC,SAPK,2CAAH,sDAUZG,EAAe,yCAAG,WAAOxB,GAAP,6FACNe,EAAAA,EAAAA,GAAM,UAAD,OAAWf,GAAW,CAChDkB,OAAQ,CACNC,QAASH,KAHgB,cACvBX,EADuB,yBAMtBA,EAASe,MANa,2CAAH,sDASfhB,EAAsB,yCAAG,WAAOJ,GAAP,6FACbe,EAAAA,EAAAA,GAAM,UAAD,OAAWf,EAAX,YAA8B,CACxDkB,OAAQ,CACNC,QAASH,KAHuB,cAC9BX,EAD8B,yBAM7BA,EAASe,KAAK1B,MANe,2CAAH,sDAStB+B,EAAsB,yCAAG,WAAOzB,GAAP,6FACbe,EAAAA,EAAAA,GAAM,UAAD,OAAWf,EAAX,YAA8B,CACxDkB,OAAQ,CACNC,QAASH,KAHuB,cAC9BX,EAD8B,yBAM7BA,EAASe,KAAKC,SANe,2CAAH,sDASnCC,EAAaI,UAAY,CACvBH,MAAOI,IAAAA,OAAAA,YAGTH,EAAgBE,UAAY,CAC1B1B,QAAS2B,IAAAA,OAAAA,YAGXvB,EAAuBsB,UAAY,CACjC1B,QAAS2B,IAAAA,OAAAA,YAGXF,EAAuBC,UAAY,CACjC1B,QAAS2B,IAAAA,OAAAA,W","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/utils/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n padding-left: 40px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n display: inline-block;\r\n margin: 10px;\r\n padding: 10px;\r\n`;\r\n\r\nexport const Imgbox = styled.div`\r\n  width: 120px;\r\n  height: 180px;\r\n\r\n  background-image: url('src/images/bg.jpg');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n\r\n`;\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Loader } from 'components/Loader/Loader';\r\nimport { getMovieDetailsCredits } from 'components/utils/fetchApi';\r\nimport { List, Item, Imgbox } from './Cast.styled';\r\n\r\nconst Cast = () => {\r\n  const [cast, setCast] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (movieId) {\r\n      getCast();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [movieId]);\r\n\r\n  const getCast = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await getMovieDetailsCredits(movieId);\r\n\r\n      setCast(response);\r\n    } catch (error) {\r\n      setError(\"Error\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {error && <p>Oops!</p>}\r\n      {isLoading && <Loader />}\r\n      <List>\r\n        {cast.map(({ credit_id, name, profile_path, character }) => (\r\n          <Item key={credit_id}>\r\n            <Imgbox>\r\n              <img src={profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : \"\"} alt={name} width=\"120\" />\r\n              {/* {profile_path && <img src={`https://image.tmdb.org/t/p/w500${profile_path}`} alt={name} width=\"120\" />} */}\r\n            </Imgbox>\r\n            <>\r\n              <h3>{name}</h3>\r\n              <p>{character}</p>\r\n            </>\r\n          </Item>\r\n        ))}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import axios from \"axios\";\r\nimport PropTypes from 'prop-types';\r\n\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\nconst KEY = \"e5b22da478d64a4856b7de5bb232688f\";\r\n\r\nexport const getTrendingMovies = async () => {\r\n  const response = await axios(`/trending/movie/day`, {\r\n    params: {\r\n      api_key: KEY,\r\n    }\r\n  });\r\n  return response.data.results;\r\n}\r\n\r\nexport const searchMovies = async (query) => {\r\n  const response = await axios(`/search/movie`, {\r\n    params: {\r\n      api_key: KEY,\r\n      query: query,\r\n    }\r\n  });\r\n  return response.data.results;\r\n}\r\n\r\nexport const getMovieDetails = async (movieId) => {\r\n  const response = await axios(`/movie/${movieId}`, {\r\n    params: {\r\n      api_key: KEY,\r\n    }\r\n  });\r\n  return response.data;\r\n}\r\n\r\nexport const getMovieDetailsCredits = async (movieId) => {\r\n  const response = await axios(`/movie/${movieId}/credits`, {\r\n    params: {\r\n      api_key: KEY,\r\n    }\r\n  });\r\n  return response.data.cast;\r\n}\r\n\r\nexport const getMovieDetailsReviews = async (movieId) => {\r\n  const response = await axios(`/movie/${movieId}/reviews`, {\r\n    params: {\r\n      api_key: KEY,\r\n    }\r\n  });\r\n  return response.data.results;\r\n}\r\n\r\nsearchMovies.propTypes = {\r\n  query: PropTypes.string.isRequired,\r\n}\r\n\r\ngetMovieDetails.propTypes = {\r\n  movieId: PropTypes.string.isRequired,\r\n}\r\n\r\ngetMovieDetailsCredits.propTypes = {\r\n  movieId: PropTypes.string.isRequired,\r\n}\r\n\r\ngetMovieDetailsReviews.propTypes = {\r\n  movieId: PropTypes.string.isRequired,\r\n}"],"names":["List","styled","Item","Imgbox","useState","cast","setCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","getCast","getMovieDetailsCredits","response","Loader","map","credit_id","name","profile_path","character","src","alt","width","axios","KEY","getTrendingMovies","params","api_key","data","results","searchMovies","query","getMovieDetails","getMovieDetailsReviews","propTypes","PropTypes"],"sourceRoot":""}